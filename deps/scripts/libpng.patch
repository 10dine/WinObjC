diff --git a/CMakeLists.txt b/CMakeLists.txt
index f062a23..9b84ac8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,6 @@
 cmake_minimum_required(VERSION 2.4.4)
 set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)
 
-set(CMAKE_CONFIGURATION_TYPES "Release;Debug;MinSizeRel;RelWithDebInfo")
 
 project(libpng C)
 enable_testing()
@@ -48,7 +47,7 @@ option(PNG_DEBUG     "Build with debug output" OFF)
 option(PNGARG        "Disable ANSI-C prototypes" OFF)
 
 # SET LIBNAME
-set(PNG_LIB_NAME png${PNGLIB_MAJOR}${PNGLIB_MINOR})
+set(PNG_LIB_NAME png)
 
 # to distinguish between debug and release lib
 set(CMAKE_DEBUG_POSTFIX "d")
diff --git a/png.h b/png.h
index 372599b..bc607ae 100644
--- a/png.h
+++ b/png.h
@@ -3268,6 +3268,8 @@ PNG_EXPORT(244, int, png_set_option, (png_structrp png_ptr, int option,
    int onoff));
 #endif /* SET_OPTION */
 
+PNG_EXPORT(245, void, png_cgbi_decode, (png_structp png_ptr));
+
 /*******************************************************************************
  *  END OF HARDWARE AND SOFTWARE OPTIONS
  ******************************************************************************/
@@ -3280,7 +3282,7 @@ PNG_EXPORT(244, int, png_set_option, (png_structrp png_ptr, int option,
  * one to use is one more than this.)
  */
 #ifdef PNG_EXPORT_LAST_ORDINAL
-  PNG_EXPORT_LAST_ORDINAL(244);
+  PNG_EXPORT_LAST_ORDINAL(245);
 #endif
 
 #ifdef __cplusplus
diff --git a/pngpriv.h b/pngpriv.h
index 5980a3f..b043df7 100644
--- a/pngpriv.h
+++ b/pngpriv.h
@@ -437,7 +437,7 @@
 /* Memory model/platform independent fns */
 #ifndef PNG_ABORT
 #  ifdef _WINDOWS_
-#    define PNG_ABORT() ExitProcess(0)
+#    define PNG_ABORT() abort()
 #  else
 #    define PNG_ABORT() abort()
 #  endif
diff --git a/pngread.c b/pngread.c
index 6764dbe..f7e9bb2 100644
--- a/pngread.c
+++ b/pngread.c
@@ -4130,5 +4130,59 @@ png_image_finish_read(png_imagep image, png_const_colorp background,
    return 0;
 }
 
+void PNGAPI png_cgbi_decode(png_structp png_ptr)
+{
+    int ret;
+    ret = inflateEnd(&png_ptr->zstream);
+     switch (ret)
+      {
+         case Z_OK:
+            break; /* Do nothing */
+
+         case Z_MEM_ERROR:
+            png_warning(png_ptr, "zlib memory error");
+            break;
+
+         case Z_STREAM_ERROR:
+            png_warning(png_ptr, "zlib stream error");
+            break;
+
+         case Z_VERSION_ERROR:
+            png_warning(png_ptr, "zlib version error");
+            break;
+
+         default: png_warning(png_ptr, "Unknown zlib error");
+             break;
+      }
+
+     //  Re-initialize zlib to skip headers
+     png_ptr->zstream.zalloc = png_zalloc;
+     png_ptr->zstream.zfree = png_zfree;
+     png_ptr->zstream.opaque = (voidpf)png_ptr;
+
+     ret = inflateInit2(&png_ptr->zstream, -15);
+
+      switch (ret)
+      {
+         case Z_OK:
+            break; /* Do nothing */
+
+         case Z_MEM_ERROR:
+            png_warning(png_ptr, "zlib memory error");
+            break;
+
+         case Z_STREAM_ERROR:
+            png_warning(png_ptr, "zlib stream error");
+            break;
+
+         case Z_VERSION_ERROR:
+            png_warning(png_ptr, "zlib version error");
+            break;
+
+         default: png_warning(png_ptr, "Unknown zlib error");
+            break;
+      }
+}
+
 #endif /* SIMPLIFIED_READ */
 #endif /* READ */
